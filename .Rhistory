mode = 'lines',
fill = 'toself')
fig <- fig %>%
add_trace(
r = sc
,theta = colnames(sc),
fill = 'toself'
)
fig
sc <- x.scaled %>%
filter(data.EmployeeNumber == input$empno )
sc
x.scaled
sc
sc <- x.scaled %>%
filter(data.EmployeeNumber == 5 )
sc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
datass <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
fig <- plot_ly(raw, x = ~count(raw$Gender==1), y = ~, text = ~Department, type = 'scatter', mode = 'markers',
marker = list(size = ~Gap, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
fig <- plot_ly(raw, x = ~count(raw$Gender==1), y = ~, text = ~Department, type = 'scatter', mode = 'markers',
marker = list(size = ~Gap, opacity = 0.5))
fig <- fig %>% layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
fig
library(plotly)
View(h_rank)
colorCount <- length(unique(var_imp$features))
feature_importance <- data_rf_imp2 %>%
ggplot(aes(x=reorder(variable, Overall), y=Overall, fill=variable)) + geom_bar(stat='identity') + coord_flip() +
theme_minimal() + theme(legend.position="none", strip.background = element_blank(), strip.text.x = element_blank(),
plot.title=theme.ti, plot.subtitle=element_text(color="white"), plot.background=element_rect(fill="#FFFFFF"),
axis.text.x=element_text(colour="black"), axis.text.y=element_text(colour="black"),
axis.title=theme.ax,
legend.background = element_rect(fill="#FFFFFF",
size=0.5,
colour ="white")) + scale_fill_manual(values = colorRampPalette(brewer.pal(26, "Set3"))(colorCount)) +
geom_label(aes(label=paste0(Overall, "%")), colour = "black", fontface = "italic", hjust=0.6) +
labs(title="요인별 중요도", x="요인", y="중요도")
feature_importance
data_rf_imp$importance %>%
as.data.frame() %>%
rownames_to_column(var="variable") %>%
ggplot(aes(x = reorder(variable, Overall), y = Overall)) +
geom_bar(stat = "identity", fill = "#1F77B4", alpha = 0.8) +
scale_fill_brewer(palette = "1") +
coord_flip() +
labs(y="중요도", x="요소") +
theme_minimal(base_family="NanumGothic") +
geom_text(aes(x=variable, label= round(Overall)),
hjust = -0.5, size=3) +
theme_minimal()
str(raw)
str(data)
runApp()
runApp()
runApp()
shiny::runApp('hrda')
runApp('hrda')
setwd("/hrda")
getwd()
setwd("C:/da/hrda/hrda")
runApp()
theme_set(theme_grey(base_family='NanumGothic'))
runApp()
runApp()
runApp()
df_radarchart <- function(df) {
df <- data.frame(df)
dfmax <- apply(df, 2, max)
dfmin <- apply(df, 2, min)
as.data.frame(rbind(dfmax,dfmin,df))
}
df_radarchart
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('hrda')
str(eda_data)
options(repr.plot.width=30, repr.plot.height=30)
str(eda_data)
nums <- select_if(eda_data, is.numeric)
corr <- round(cor(nums), 1)
corr
raw
corr
ggcorrplot(corr)
options(repr.plot.width=10, repr.plot.height=10)
nums <- select_if(data, is.numeric)
corr <- round(cor(nums), 1)
ggcorrplot(corr,
type = "lower",
lab = TRUE,
lab_size = 2,
method="square",
colors = c("tomato2", "white", "#01A9DB"),
title="각 변수별 상관관계",
ggtheme=theme_minimal()
+ theme(axis.title = theme.ax, plot.title = theme.ti)  # 한글 폰트
)
ggcorrplot(corr)
str(eda_data)
# # 각 변수별 상관관계
options(repr.plot.width=30, repr.plot.height=30)
nums <- select_if(eda_data, is.numeric)
corr <- round(cor(nums), 1)
ggcorrplot(corr)
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_minimal(),
colors = c("#6D9EC1", "white", "#E46726"))
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_minimal(),
colors = c("##FBDE72", "white", "#038DB2"))
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_minimal(),
colors = c("#FBDE72", "white", "#038DB2"))
runApp('hrda')
ggcorrplot(corr,
type = "lower",
lab = TRUE,
lab_size = 2,
method="square",
colors = c("tomato2", "white", "#01A9DB"),
title="각 변수별 상관관계",
ggtheme=theme_minimal()
+ theme(axis.title = theme.ax, plot.title = theme.ti)  # 한글 폰트
)
ggcorrplot(corr,
type = "lower",
lab = TRUE,
lab_size = 2,
method="square",
colors = c("tomato2", "white", "#01A9DB"),
title="각 변수별 상관관계",
ggtheme=theme_minimal()
+ theme(axis.title = theme.ax, plot.title = theme.ti)  # 한글 폰트
)
ggcorrplot
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_minimal(),
colors = c("#FBDE72", "white", "#038DB2"))
ggcorr(corr, geom = "text", nbreaks = 5,  colors =  c("#FBDE72", "white", "#038DB2"), hjust = 1)
ggcorr(corr,  nbreaks = 5,  colors =  c("#FBDE72", "white", "#038DB2"), hjust = 1)
ggcorr(corr,  nbreaks = 3,  colors =  c("#FBDE72", "white", "#038DB2"), hjust = 1)
ggcorr(corr,  nbreaks = 3,  color= c("#FBDE72", "white", "#038DB2"), hjust = 1)
ggcorr(corr,  nbreaks = 3,  color= c("#FBDE72", "white", "#038DB2"), hjust = 1)
ggcorr(corr,  nbreaks = 3,  color= c("#FBDE72", "#038DB2"), hjust = 1)
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white",
ggtheme = ggplot2::theme_minimal(),
colors = c("#FBDE72", "white", "#038DB2"))
library(psych)
pairs.panels(corr, scale=TRUE)
corrplot.mixed(cor(corr), order="hclust", tl.col="black")
ggpairs(corr)
ggpairs(eda_data)
ggpairs(eda_data)
ggcorr(corr,  nbreaks = 3,  color= c("#FBDE72", "#038DB2"), hjust = 1)
ggcorr(corr,  nbreaks = 3,  color= "grey50", hjust = 1)
runApp('hrda')
runApp('hrda')
x.scaled <- eda_data %>%
select(top_ten_variable_v)
# 상위 변수로 정규화
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(
lapply(x.scaled, resc),
eda_data$EmployeeNumber
)
x.scaled <- result %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(
lapply(x.scaled, resc),
eda_data$EmployeeNumber
)
x.scaled <- data.frame(lapply(x.scaled, resc))
data_rg %>%
predict(rfdata_test) %>%
bind_cols(rfdata_test) %>%
metrics(truth=Attrition, estimate=.pred_class)
x.scaled <- result %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
result
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(
lapply(x.scaled, resc),
eda_data$EmployeeNumber
)
resc <- function(x) rescale(x,to = c(0, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
resc <- function(x) rescale(x,to = c(0, 5))
x.scaled <- result %>%
select(top_ten_variable_v)
x.scaled
x.scaled <- data.frame(lapply(x.scaled, resc))
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
runApp('hrda')
x.scaled <- eda_data %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- rfdata_test %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
library(rescale)
x.scaled <- data.frame(lapply(x.scaled, function(x) rescale(x,to = c(1, 5))))
resc <- function(x) {
rescale(x,to = c(1, 5))
}
x.scaled <- data.frame(lapply(x.scaled, resc))
resc <- function(x, ...) {
rescale(x,to = c(1, 5))
}
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- rfdata_test %>%
select(top_ten_variable_v)
x.scaled <- eda_data %>%
select(top_ten_variable_v)
x.scaled <- result %>%
select(top_ten_variable_v)
x.scaled
# 상위 변수로 정규화
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(
lapply(x.scaled, resc),
data$EmployeeNumber
)
runApp('hrda')
runApp('hrda')
runApp('hrda')
x.scaled <- eda_data %>%
select(top_ten_variable_v)
# 상위 변수로 정규화
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(
lapply(x.scaled, resc),
eda_data$EmployeeNumber
)
eda_data
x.scaled <- result %>%
select(top_ten_variable_v)
x.scaled
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- data.frame(
lapply(x.scaled, resc),
#eda_data$EmployeeNumber
)
x.scaled <- as.data.frame(scale(x.scaled))
x.scaled
normalized<-function(y) {
x<-y[!is.na(y)]
x<-(x - min(x)) / (max(x) - min(x))
y[!is.na(y)]<-x
return(y)
}
apply(x.scaled[,c(1,5)],5,normalized)
apply(x.scaled[,c(1,5)],2,normalized)
apply(x.scaled[,c(1,5)],10,normalized)
apply(x.scaled[,c(1,2,3,4,5)],10,normalized)
apply(x.scaled[,c(1,2,3,4,5)],5,normalized)
x.scaled <- result %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <-
as.data.frame(scale(x.scaled))
x.scaled
x.scaled <- result %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
as.data.frame(scale(x.scaled))
x.scaled <-
as.data.frame(scale(x.scaled))
x.scaled <- data.frame(lapply(x.scaled, resc))
x.scaled <- result %>%
select(top_ten_variable_v)
data_rg$results
data_rg$results
data_rg
result =
data_rg %>%
predict(rfdata_test, type="prob")
result
result =
data_rg %>%
predict(rfdata_test, type="prob") %>%
bind_cols(rfdata_test)
result
data_rg %>%
predict(rfdata_test) %>%
bind_cols(rfdata_test)
data_rg %>%
predict(rfdata_test) %>%
bind_cols(rfdata_test) %>%
metrics(truth=Attrition, estimate=.pred_class)
rm("c")
rm()
rm("x.scaled")
rm("resc")
data_rg %>%
predict(rfdata_test) %>%
bind_cols(rfdata_test) %>%
metrics(truth=Attrition, estimate=.pred_class)
x.scaled <- result %>%
select(top_ten_variable_v)
resc <- function(x) rescale(x,to = c(1, 5))
x.scaled <- data.frame(lapply(x.scaled, resc))
find("c")
rm("c")
runApp('hrda')
--vanilla
find("c")
detach(plyr)
detach("plyr")
detach("dplyr")
detach(dplyr)
getwd()
setwd("C:/da/hrda/hrda")
runApp()
shiny::runApp('hrda')
install.packages("showtext")
runApp('hrda')
install.packages(sysfonts)
install.packages("sysfonts")
runApp('hrda')
shiny::runApp('hrda')
install.packages("waffle")
runApp('hrda')
pacotes = c("shiny", "shinydashboard", "shinythemes", "plotly", "shinycssloaders","tidyverse",
"ggplot2", "DT", "extrafont", "corrplot","GGally","ggpubr", "dplyr"
,"rpart",  "RColorBrewer","caret", "ggthemes", "corrr", "waffle", "formattable"
,"gridExtra", "echarts4r", "echarts4r.assets", "hrbrthemes", "magrittr", "ggcorrplot", "reshape2")
package.check <- lapply(pacotes, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
}
})
runApp('hrda')
library(sysfonts)
runApp('hrda')
rsconnect::deployApp()
Error building image: Error building rstanarm (2.19.2). Build exited with non-zero status: 1
rsconnect::setAccountInfo(name='yelahj', token='D9297B0992A79768746EE993EFD1130A', secret='wo8dCj+dE4zm8SZrKiGKEXoJyHyNKEfe2mu3VHxe')
rsconnect::deployApp()
getwd()
ls
cd hrda
getwd()
setwd("/Users/yelahj/Project/hrdaapp/hrda/hrda")
rsconnect::deployApp()
runApp()
install.packages("rstarnarm")
install.packages(rstanarm)
install.packages("rstanarm")
install.packages("rstanarm")
rsconnect::deployApp()
version
version
install.packages("DT")
install.packages(c("caret", "corrplot", "corrr", "crosstalk", "dplyr", "extrafont", "formattable", "ggcorrplot", "ggridges", "ggthemes", "janitor", "plotly", "randomForest", "shinydashboard", "shinythemes", "showtext", "tidymodels", "tidyverse", "waffle", "yardstick"))
pacotes = c("shiny", "shinydashboard", "shinythemes", "plotly", "shinycssloaders","tidyverse",
"ggplot2", "DT", "extrafont", "corrplot","GGally","ggpubr", "dplyr"
,"rpart",  "RColorBrewer","caret", "ggthemes", "corrr", "waffle", "formattable"
,"gridExtra", "echarts4r", "echarts4r.assets", "hrbrthemes", "magrittr", "ggcorrplot", "reshape2")
package.check <- lapply(pacotes, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
}
})
install.packages(x, dependencies = TRUE)
install.packages(c("corrr", "ggcorrplot", "ggridges", "ggthemes", "janitor", "plotly", "tidymodels", "tidyverse"))
install.packages(c("corrr", "dplyr", "ggthemes", "janitor", "plotly", "tidymodels", "tidyverse", "yardstick"))
install.packages("tidymodels")
library(shiny)
install.packages("shiny")
install.packages("Shiny")
y
install.packages("Shiny")
version
install.packages("shiny")
install.packages("httpuv")
install.packages("httpuv")
install.packages("Rcpp")
install.packages("shiny")
install.packages("shiny")
install.packages("later")
install.packages("promises")
install.packages("promises")
> .libPaths()
[1] "/usr/local/lib/R/site-library" "/usr/lib/R/site-library"
[3] "/usr/lib/R/library"
.libPaths()
install.packages(Rcpp)
install.packages("Rcppz")
install.packages("Rcpp")
install.packages("httpuv")
install.packages("shiny")
version
cersion
version
runnApp()
version
install.packages(c("later","promises","rlang"))
install.packages(c("shiny"))
ㅣㄴ
version
shiny::runApp('hrda')
pacotes = c("shiny", "shinydashboard", "shinythemes", "plotly", "shinycssloaders","tidyverse",
"ggplot2", "DT", "extrafont", "corrplot","GGally","ggpubr", "dplyr"
,"rpart",  "RColorBrewer","caret", "ggthemes", "corrr", "waffle", "formattable"
,"gridExtra", "echarts4r", "echarts4r.assets", "hrbrthemes", "magrittr", "ggcorrplot", "reshape2")
package.check <- lapply(pacotes, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
}
})
runApp('hrda')
runApp('hrda')
install.packages("rstanarm")
install.packages("rstanarm")
getwd()
read_csv("hrda/data/dataset.csv")
library(tidyverse)
library(dplyr)
read_csv("hrda/data/dataset.csv")
ls
getwd("")
getwd()
setwd("/Users/yelahj/Project/hrdaapp/hrda/hrda")
install.packages("rstanarm")
install.packages("scrun")
install.packages("xscrun")
install.packages("rlang")
install.packages("rlang")
install.packages("rstanarmz")
install.packages("rstanarm")
shiny::runApp()
pacotes = c("shiny", "shinydashboard", "shinythemes", "plotly", "shinycssloaders","tidyverse",
"ggplot2", "DT", "extrafont", "corrplot","GGally","ggpubr", "dplyr"
,"rpart",  "RColorBrewer","caret", "ggthemes", "corrr", "waffle", "formattable"
,"gridExtra", "echarts4r", "echarts4r.assets", "hrbrthemes", "magrittr", "ggcorrplot", "reshape2")
package.check <- lapply(pacotes, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
}
})
devtools::install_github("JohnCoene/echarts4r.assets")
runApp()
sesstionInfo()
sessionInfo()
rsconnect::showLogs():
)
rsconnect::showLogs()
install.packages('e1071', dependencies=TRUE)
install.packages("e1071", dependencies = TRUE)
install.packages("e1071")
sessionInfo()
rsconnect::showLogs():
)
rsconnect::showLogs()
require(e1071)
install.packages("cond")
devtools::install_github
devtools::install_github
devtools::install_github("jas1/RBioFabric")
shiny::runApp()
runApp()
rsconnect::showLogs():
)
rsconnect::showLogs()
install.packages(xgboost)
install.packages("xgboost")
library(xgboost)
rsconnect::showLogs()
rsconnect::showLogs()
install.packages("echarts4r")
